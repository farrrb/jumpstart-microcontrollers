{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"... to my first attempt to write a book \"Jump Start Microcontrollers\". Inspired by the process of jump starting a car with dead batteries. I'll try to show you how to \"jump start\" a microcontroller. We will begin with zero and I'll show you how to get and use the information to awake Frankenstein's Monster (our target board, the BBC micro:bit ). My current plan is to do everything in plain old C99 with no assembly needed at all. I sure hope this plan will work out (no promises). Also I'll try to use only FOSS products and as little of the (proprietary) vendor libraries as possible. Is this book right for me? # If you can answer any of that question with a \"yes\" , a \"definitely\" or a \"omg I always wanted to know something about that\" , this book should be the right choice for you. - Do you want to learn to set up microcontroller projects from the bottom up? - Do you want to learn how to get up a running C/C++ environment on your own? - Do you want to learn something more of the Cortex-M0? - Do you want to know how to read the microcontroller manuals to get the information you'll need? Resources # The Resource page will be updated continuously, so that you'll find every PDF, every website and every book I'll reference throughout this book there. About Me # The good old \"Who am I?\"\" and \"What have I accomplished so far?\" Hey, I am Fabian Zahn and I am an Embedded Software Engineer working for Jungheinrich (forklift trucks and interlogistics) for the last five years. I really like my job and all about embedded software (who doesn't?). I studied electrical engineering years ago just to find out how computers really work. Initially I wanted to study informatics but I always wondered how everything fits together from the highest level language to the tiniest transistor. So electrical engineering was the obvious (and right) choice for me. As a last remark I would like to point out that I am not a native speaker (I am actually from Germany, the country with the velvety soft language). So please feel free to question and or correct my English at any time. Contributing # This book is a work in progress and I plan to write it in my spare time, so mistakes will be made, errors will occur and typos will appear. Please don't hesitate to report an issue or create a pull request. See the contributing page for more information on how to do it. License # My role model in terms of writing books, Bob Nystrom , did come up with a very smart approach which I adapted: A dual license . It is worth reading his reasoning behind is license approach, so feel free to do so. My version of his approach can be found under here .","title":"Welcome"},{"location":"#is-this-book-right-for-me","text":"If you can answer any of that question with a \"yes\" , a \"definitely\" or a \"omg I always wanted to know something about that\" , this book should be the right choice for you. - Do you want to learn to set up microcontroller projects from the bottom up? - Do you want to learn how to get up a running C/C++ environment on your own? - Do you want to learn something more of the Cortex-M0? - Do you want to know how to read the microcontroller manuals to get the information you'll need?","title":"Is this book right for me?"},{"location":"#resources","text":"The Resource page will be updated continuously, so that you'll find every PDF, every website and every book I'll reference throughout this book there.","title":"Resources"},{"location":"#about-me","text":"The good old \"Who am I?\"\" and \"What have I accomplished so far?\" Hey, I am Fabian Zahn and I am an Embedded Software Engineer working for Jungheinrich (forklift trucks and interlogistics) for the last five years. I really like my job and all about embedded software (who doesn't?). I studied electrical engineering years ago just to find out how computers really work. Initially I wanted to study informatics but I always wondered how everything fits together from the highest level language to the tiniest transistor. So electrical engineering was the obvious (and right) choice for me. As a last remark I would like to point out that I am not a native speaker (I am actually from Germany, the country with the velvety soft language). So please feel free to question and or correct my English at any time.","title":"About Me"},{"location":"#contributing","text":"This book is a work in progress and I plan to write it in my spare time, so mistakes will be made, errors will occur and typos will appear. Please don't hesitate to report an issue or create a pull request. See the contributing page for more information on how to do it.","title":"Contributing"},{"location":"#license","text":"My role model in terms of writing books, Bob Nystrom , did come up with a very smart approach which I adapted: A dual license . It is worth reading his reasoning behind is license approach, so feel free to do so. My version of his approach can be found under here .","title":"License"},{"location":"contributing/","text":"Hello there, I've heard you would like to contribute something? Do you have an idea for a topic or do you think I should explain something more in detail? Please create an issue . Do you want to fix a typo or correct my grammar, syntax or language? Please fork this repository, create a branch, make your changes and create a pull request.","title":"Contributing"},{"location":"license/","text":"Copyright (c) 2018 Fabian Zahn Each file in this repository falls under one of the following licenses: - License for Written Text - License for Source Code License for Written Text # Files with the extensions: \".html\", \".htm\", \".scss\", \".css\", \".md\", and \".txt\" (except CMakeLists.txt files) use the following Creative Commons license: Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0) https://creativecommons.org/licenses/by-nc-nd/4.0/ License for Source Code # Files with extensions related to source code, including (but not limited to): \".c\", \".h\", \".S\", \".ld\", \".cmake\", \".bat\", \".sh\", and \".py\" use the MIT license: The MIT License Copyright (c) 2018 Fabian Zahn Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license-for-written-text","text":"Files with the extensions: \".html\", \".htm\", \".scss\", \".css\", \".md\", and \".txt\" (except CMakeLists.txt files) use the following Creative Commons license: Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0) https://creativecommons.org/licenses/by-nc-nd/4.0/","title":"License for Written Text"},{"location":"license/#license-for-source-code","text":"Files with extensions related to source code, including (but not limited to): \".c\", \".h\", \".S\", \".ld\", \".cmake\", \".bat\", \".sh\", and \".py\" use the MIT license: The MIT License Copyright (c) 2018 Fabian Zahn Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License for Source Code"},{"location":"resources/","text":"The BBC Micro Bit (micro:bit) # Developer Community Hardware Overview Schematics Resellers DAPLink Nordic nRF51822 # Product Page Software Development Kit (nRF5 SDK) ARM # ARM Cortex-M0 Cortex\u2122-M0 Devices Generic User Guide Cortex\u2122-M0 Devices Generic User Guide - PDF Version GNU Arm Embedded Toolchain","title":"Resources"},{"location":"resources/#the-bbc-micro-bit-microbit","text":"Developer Community Hardware Overview Schematics Resellers DAPLink","title":"The BBC Micro Bit (micro:bit)"},{"location":"resources/#nordic-nrf51822","text":"Product Page Software Development Kit (nRF5 SDK)","title":"Nordic nRF51822"},{"location":"resources/#arm","text":"ARM Cortex-M0 Cortex\u2122-M0 Devices Generic User Guide Cortex\u2122-M0 Devices Generic User Guide - PDF Version GNU Arm Embedded Toolchain","title":"ARM"},{"location":"under_construction/","text":"Todo This page has to be written soon!","title":"ARM Cortex-M0"},{"location":"introduction/motivation/","text":"Why are you doing this? #","title":"Motivation"},{"location":"introduction/motivation/#why-are-you-doing-this","text":"","title":"Why are you doing this?"},{"location":"introduction/readme/","text":"CPUs, MCUs, Processors and other Terms of Interest # Modern computing terms like Processor , CPU , and MCU are poorly defined so I thought it would be smart to write down my own definitions of them right at front of this book. SoC - System on a Chip - An integrated circuit that contains all components of a system on a single chip (substrate). CPU - Central Processing Unit - The central processing core, obviously (e.g. Cortex-M0). MCU - Microcontroller Unit - A SoC containing a CPU, memory, peripherals. Processor - This is the most generic term (e.g. A microcontroller contains a processor, a CPU is a processor, a Intel(R) Core(TM) i5 is a processor, a SoC may contain a procesor, ...) Special Sections # While reading this book you'll run into \"Special Sections\" which are there to increase the readability. The following examples demonstrate the purpose of these sections: Info An additional information. Tip A helpful tip. Attention This part needs attention. Example A short example. Quote \"A famous quote.\" - A. Guy Code Highlighting # Shell / Command Line # Commands which are intended to be input in the shell or command line are prefixed by a \"$\" sign. For example if i want you to get the version of the current gcc the following should be entered in the command line / bash: $ gcc --version C-Code # You'll find a lot of C-Code on your way which will look like this: int main ( void ) { return 0 ; } Assembly # And hopefully only a small amount of assembly, which will look like this: .section .text .global _start _start: bkpt","title":"README"},{"location":"introduction/readme/#cpus-mcus-processors-and-other-terms-of-interest","text":"Modern computing terms like Processor , CPU , and MCU are poorly defined so I thought it would be smart to write down my own definitions of them right at front of this book. SoC - System on a Chip - An integrated circuit that contains all components of a system on a single chip (substrate). CPU - Central Processing Unit - The central processing core, obviously (e.g. Cortex-M0). MCU - Microcontroller Unit - A SoC containing a CPU, memory, peripherals. Processor - This is the most generic term (e.g. A microcontroller contains a processor, a CPU is a processor, a Intel(R) Core(TM) i5 is a processor, a SoC may contain a procesor, ...)","title":"CPUs, MCUs, Processors and other Terms of Interest"},{"location":"introduction/readme/#special-sections","text":"While reading this book you'll run into \"Special Sections\" which are there to increase the readability. The following examples demonstrate the purpose of these sections: Info An additional information. Tip A helpful tip. Attention This part needs attention. Example A short example. Quote \"A famous quote.\" - A. Guy","title":"Special Sections"},{"location":"introduction/readme/#code-highlighting","text":"","title":"Code Highlighting"},{"location":"introduction/readme/#shell-command-line","text":"Commands which are intended to be input in the shell or command line are prefixed by a \"$\" sign. For example if i want you to get the version of the current gcc the following should be entered in the command line / bash: $ gcc --version","title":"Shell / Command Line"},{"location":"introduction/readme/#c-code","text":"You'll find a lot of C-Code on your way which will look like this: int main ( void ) { return 0 ; }","title":"C-Code"},{"location":"introduction/readme/#assembly","text":"And hopefully only a small amount of assembly, which will look like this: .section .text .global _start _start: bkpt","title":"Assembly"},{"location":"introduction/start/","text":"Quote \"ld: warning: cannot find entry symbol _start;\" - The GNU Linker Jump Start Microcontrollers # Take out your jumper cables. Make sure your microcontroller is in \"park\" or in \"neutral\" Connect the cables (Gnd first, then Vcc) Fire the whole thing up!","title":"Start"},{"location":"introduction/start/#jump-start-microcontrollers","text":"Take out your jumper cables. Make sure your microcontroller is in \"park\" or in \"neutral\" Connect the cables (Gnd first, then Vcc) Fire the whole thing up!","title":"Jump Start Microcontrollers"},{"location":"introduction/work_in_progress/","text":"Attention This book is a work in progress. I will update and refactor the hell out of it. If you find errors, typos, mistakes or if you just want to improve the book itself, feel free to consider contributing to it.","title":"Work In Progress"},{"location":"target/target_selection/","text":"Why the BBC Micro Bit (micro:bit)? # There were a lot of factors involved when I chose the platform for this project. My top five requirements where the following: The target board shall be affordable. The target board shall be available. The target board shall be simple in terms of schematic complexity. The target microcontroller shall be an ARM Cortex-M core. The target platform shall be open in terms of open source. After a short period of research I found the BBC Micro Bit to be the perfect platform for this project, because it fulfilled all of my requirements. For me it seems that the micro:bit is the \"Raspberry Pi\" of MCUs. Application MCU Specification # This will be our focus in this book. This is where the magic (application) happens. 32-bit ARM (R) Cortex-M0 CPU ( Nordic nRF51822-QFAA-R rev 3 ) 16MHz Clock Speed (Crystal Oscillator) 16kByte RAM (SRAM) 256kByte ROM (Flash) Onboard Bluetooth Low Energy (BLE) peripheral Interface MCU Specification # This MCU basically has three functions: It is the responsible for the USB interface and the Debug Access Port of the application MCU (see DAPLink for more information). The interface MCU is also responsible for the power supply. It contains the step down regulator to convert the 5V USB voltage to the 3.3V needed by the application MCU. We will use this only as a Debug / Flash Adapter throughout this book. The third function we will use is the UART to USB conversion. With this little functionality it is possible to exchange messages between the application MCU and the PC. 32-bit ARM (R) Cortex-M0+ CPU ( NXP MKL26Z128VFM4 ) 16MHz Clock Speed (Crystal Oscillator) 16kByte RAM (SRAM) 128kByte ROM (Flash) Board Specification # 2 User Buttons 1 System Reset Button 5x5 LED Matrix (\"Display\") 3-Axis Accelerometer ( NXP MMA8653FC ) Magnetometer ( NXP MAG3110 )","title":"Target - micro:bit"},{"location":"target/target_selection/#why-the-bbc-micro-bit-microbit","text":"There were a lot of factors involved when I chose the platform for this project. My top five requirements where the following: The target board shall be affordable. The target board shall be available. The target board shall be simple in terms of schematic complexity. The target microcontroller shall be an ARM Cortex-M core. The target platform shall be open in terms of open source. After a short period of research I found the BBC Micro Bit to be the perfect platform for this project, because it fulfilled all of my requirements. For me it seems that the micro:bit is the \"Raspberry Pi\" of MCUs.","title":"Why the BBC Micro Bit (micro:bit)?"},{"location":"target/target_selection/#application-mcu-specification","text":"This will be our focus in this book. This is where the magic (application) happens. 32-bit ARM (R) Cortex-M0 CPU ( Nordic nRF51822-QFAA-R rev 3 ) 16MHz Clock Speed (Crystal Oscillator) 16kByte RAM (SRAM) 256kByte ROM (Flash) Onboard Bluetooth Low Energy (BLE) peripheral","title":"Application MCU Specification"},{"location":"target/target_selection/#interface-mcu-specification","text":"This MCU basically has three functions: It is the responsible for the USB interface and the Debug Access Port of the application MCU (see DAPLink for more information). The interface MCU is also responsible for the power supply. It contains the step down regulator to convert the 5V USB voltage to the 3.3V needed by the application MCU. We will use this only as a Debug / Flash Adapter throughout this book. The third function we will use is the UART to USB conversion. With this little functionality it is possible to exchange messages between the application MCU and the PC. 32-bit ARM (R) Cortex-M0+ CPU ( NXP MKL26Z128VFM4 ) 16MHz Clock Speed (Crystal Oscillator) 16kByte RAM (SRAM) 128kByte ROM (Flash)","title":"Interface MCU Specification"},{"location":"target/target_selection/#board-specification","text":"2 User Buttons 1 System Reset Button 5x5 LED Matrix (\"Display\") 3-Axis Accelerometer ( NXP MMA8653FC ) Magnetometer ( NXP MAG3110 )","title":"Board Specification"},{"location":"toolchain/toolchain_selection/","text":"TODO","title":"Compiler - (GCC for ARM)"}]}